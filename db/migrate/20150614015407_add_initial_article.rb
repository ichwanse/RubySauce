class AddInitialArticle < ActiveRecord::Migration
  def up   
    Article.create([
        {title: "Welcome to RoR-CMS", body: "<p>Welcome to the RoR-CMS.</p>\r\n<p>This is the first example of your post.</p>\r\n<p>To be able to add a post, please visit the admin page</p>", author_id: 1, permalink: "welcome-to-ror-cms" , excerp: "", feat_img: "8-43670050.jpg", comment_status: nil, publish_status: 'Publish' , publish_visibility: 'Public' , article_type: 'Article' ,article_vcount: 33, created_at: DateTime.now, updated_at: DateTime.now},
        {title: "About CMS", body: "<p>RoR-CMS is a CMS that is made from the Rails framework.</p>\r\n<p>Important features of RoR-CMS is;</p>\r\n<p>1. Ease of replacing URI</p>\r\n<p>2. admin pages separate from the pages visitors</p>\r\n<p>3. Ease change the template or layout</p>\r\n<p>4. Using TDD so as to apply best practice</p>\r\n<p>5. Do not change the structure and conventions Rails Rails so that users can easily adapt or those who are not familiar with Rails can learn from this application</p>", author_id: 1, permalink: "about-cms", excerp: "", feat_img: "8-43670050.jpg", comment_status: nil, publish_status: "Publish", publish_visibility: nil, article_type: "Page",article_vcount: 61, created_at: DateTime.now , updated_at: DateTime.now},
        {title: "Bantuan", body: "<p>Ini satux</p>", author_id: 1, permalink: "bantuan", excerp: "", feat_img: "8-43670050.jpg", comment_status: nil, publish_status: "Publish", publish_visibility: nil, article_type: "Page",article_vcount: 42, created_at: DateTime.now , updated_at: DateTime.now},
        {title: "About Me", body: "<p>Hi, I am Nitza Alfinas. I am an IT consultant from Indonesia</p>", author_id: 1, permalink: "about-me", excerp: "", feat_img: "4-35350374.jpg", comment_status: nil, publish_status: "Publish", publish_visibility: nil, article_type: "Page",article_vcount: 12, created_at: DateTime.now , updated_at: DateTime.now},
        {title: "Template", body: '<p>One of the main features of this CMS is that it can easily create templates. The great view will bind the hearts of visitors to the website.</p>\r\n<p>Template information Template information is important for the template itself. Template information gives the application information about how to integrate the template to the application.</p>\r\n<p>The template information file must be named with template.json and contain the following code;</p>\r\n<pre>{\r\n    "folder_name": "ror_cms_2",\r\n    "name": "Clean Blog",\r\n    "template_version": "1.0",\r\n    "cms_version": "1.0",\r\n    "author": "Clean Blog",\r\n    "email": "",\r\n    "url": "http://ironsummitmedia.github.io/startbootstrap-clean-blog/index.html",\r\n    "description": "The template name is Clean Blog. You can see here: http://ironsummitmedia.github.io/startbootstrap-clean-blog/index.html",\r\n    "license": "license",\r\n    "css_files": ["application.css.scss","bootstrap.css","discuss.scss","galleries.scss","landing.scss","page_single.scss","percategory.scss"],\r\n    "js_files": ["application.js","article_single.js","discuss.js","galleries.js","landing.js","page_single.js","percategory.js"],\r\n    "supplements": [\r\n        { "copy_type": "file", "name": "home-bg.jpg", "copy_to": "app/assets/images" },\r\n        { "copy_type": "folder", "name": "fonts", "copy_to": "public" }\r\n    ]\r\n}\r\n</pre>\r\n<p>folder_name: The folder location of the template files<br /> name: The name of the template<br /> template_version: The version of the template<br /> cms_version: The CMS Version<br /> author: The author of the template<br /> email: The email<br /> url: The template URL or the author URL<br /> description: Description about the template<br /> license: The license<br /> css_files: The CSS files along with the template. Please list all of the CSS files here, so the application can install the file to assets/stylesheets<br /> js_files: The Javascript files. Please list all of the Javascript files here, so the application can install the file to assets/javascripts<br /> supplements: Supplements are part where all the data that are not include in the above list. Supplements are very unique because it can be a file and directory. The code as follows;</p>\r\n<pre>{ "copy_type": "file", "name": "home-bg.jpg", "copy_to": "app/assets/images" }\r\n</pre>\r\n<p>copy_type: It can be file or folder<br /> name: The file name or the folder name<br /> copy_to: You can copy the file into the directory as you want.</p>', author_id: 1, permalink: "template", excerp: "", feat_img: "default.png", comment_status: nil, publish_status: "Publish", publish_visibility: "Public", article_type: "Article",article_vcount: 7, created_at: DateTime.now , updated_at: DateTime.now},
        {title: "Installation", body: '<p>To Install and run Ruby Sauce, follow these steps;</p>\r\n<p>&nbsp;</p>\r\n<p>1. Clone or Download</p>\r\n<p>Ruby Sauce currently only available as a clone or download from github repository. For those who want to download, please download on the <a href="https://github.com/nitzaalfinas/RubySauce/archive/master.zip">github</a>&nbsp;and for those who want to clone, follow the following command;</p>\r\n<pre>git clone https://github.com/nitzaalfinas/RubySauce.git</pre>\r\n<p>&nbsp;</p>\r\n<p>2. Copy <code>config/database.yml.sample</code> and rename to <code>config/database.yml</code></p>\r\n<p>3. Change the username and the database according to your configuration</p>\r\n<p>4. Run <code>bundle install</code></p>\r\n<p>5. Run <code>rake db:migrate</code></p>\r\n<p>6. Run the server with <code>rails s</code></p>', author_id: 1, permalink: "installation", excerp: "", feat_img: "default.png", comment_status: nil, publish_status: "Publish", publish_visibility: "Public", article_type: "Article",article_vcount: 3, created_at: DateTime.now , updated_at: DateTime.now},
        {title: "How to create a theme", body: '
<h2>Table of Content</h2>\r\n<ul class="table-content">\r\n<li><a href="#create_the_theme_information">Create the&nbsp;theme information</a></li>\r\n<li><a href="#theme_stucture">The file and folder structure of the theme</a></li>\r\n<li><a href="#views">Views</a></li>\r\n<ul>\r\n<li><a href="#layouts">Layouts</a></li>\r\n<li><a href="#landing">Landing</a></li>\r\n<li><a href="#article_single">Article Single</a></li>\r\n<li><a href="#page_single">Page Single</a></li>\r\n<li><a href="#search">Search</a></li>\r\n</ul>\r\n</ul>\r\n<p>In this article, I will create a very simple theme so you can follow the steps.&nbsp;After completing this tutorial, I hope that you can make yourself more beautiful and complex themes.</p>\r\n<div id="create_the_theme_information">\r\n<h2>Create the theme information</h2>\r\n<p>The theme information looks like follows;</p>\r\n<pre>{\r\n    "folder_name": "super_simple",\r\n    "name": "Super Simple",\r\n    "theme_version": "1.0",\r\n    "cms_version": "1.0",\r\n    "tags":"twitterbootstrap",\r\n    "author": "Nitza Alfinas",\r\n    "email": "",\r\n    "url": "",\r\n    "description": "",\r\n    "license": "",\r\n    "css_files": [],\r\n    "js_files": [],\r\n    "supplements": [\r\n        { "copy_type": "folder", "name": "stylesheets", "copy_to": "public" },\r\n        { "copy_type": "file", "name": "application.js", "copy_to": "public/javascripts" },\r\n        { "copy_type": "file", "name": "bootstrap.min.js", "copy_to": "public/javascripts" },\r\n        { "copy_type": "file", "name": "jquery.min.js", "copy_to": "public/javascripts" }\r\n    ]\r\n}\r\n</pre>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td valign="top"><code>folder_name</code>:</td>\r\n<td>The folder name of the theme files.&nbsp;<br /> And please notice; <strong>Ruby Sauce strict in using these rules. &nbsp;If you give the folder themez_name, the zip file must be themez_name.zip.</strong></td>\r\n</tr>\r\n<tr>\r\n<td><code>name</code>:</td>\r\n<td>The name of the theme</td>\r\n</tr>\r\n<tr>\r\n<td><code>theme_version</code>:</td>\r\n<td>The version of the theme&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td><code>cms_version</code>:</td>\r\n<td>The CMS Version&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td><code>author</code>:</td>\r\n<td>The author of the theme</td>\r\n</tr>\r\n<tr>\r\n<td><code>email</code>:</td>\r\n<td>The email</td>\r\n</tr>\r\n<tr>\r\n<td><code>url</code>:</td>\r\n<td>The theme URL or the author URL</td>\r\n</tr>\r\n<tr>\r\n<td><code>description</code>:</td>\r\n<td>Description about the theme&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td><code>license</code>:&nbsp;</td>\r\n<td>The license</td>\r\n</tr>\r\n<tr>\r\n<td><code>css_files</code>:</td>\r\n<td>The CSS files along with the theme. Please list all of the CSS files, so the application can install the file to the app/assets/stylesheets folder&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td><code>js_files</code>:</td>\r\n<td>The Javascript files. Please list all of the Javascript files here, so the application can install the file to assets/javascripts</td>\r\n</tr>\r\n<tr>\r\n<td valign="top"><code>supplements</code>:</td>\r\n<td>Supplements are part where all the data that are not include in the above list. Supplements are very unique because it can be a file and directory. The code as follows;<br />\r\n<pre>{ "copy_type": "file", "name": "home-bg.jpg", "copy_to": "app/assets/images" }\r\n</pre>\r\n<p><code>copy_type</code>: It can be file or folder<br /> <code>name</code>: The file name or the folder name</p>\r\n<p><code>copy_to</code>: You can copy the file into the directory as you want.&nbsp;</p>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>&nbsp;</p>\r\n<p>Above code, I only use supplements array to create stylesheets and JavaScripts.&nbsp;On the other tutorial,&nbsp;I will give an example how to create stylesheets and JavaScripts so that can be installed on the app/assets folder.</p>\r\n<p>Let''s take a look closer to the supplement array;</p>\r\n<ul>\r\n<li>The first array; the type is a folder, the name is stylesheets and the Ruby Sauce will install this folder to the public folder.</li>\r\n<li>The second array; the type is a file, the name is application.js&nbsp;and the Ruby Sauce will install this file&nbsp;to the public/javascripts folder.</li>\r\n<li>The third array; the type is a&nbsp;file, the name is&nbsp;bootstrap.min.js&nbsp;and the Ruby Sauce will install this&nbsp;file&nbsp;to the public/javascripts folder.</li>\r\n<li>The fourth array; the type is a&nbsp;file, the name is&nbsp;jquery.min.js&nbsp;and the Ruby Sauce will install this&nbsp;file&nbsp;to the public/javascripts folder.</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n</div>\r\n<div id="theme_stucture">\r\n<h2>The file and folder structure of the theme</h2>\r\n<p>After creating the theme information, let''s create&nbsp;the structure of the file/folder as shown below</p>\r\n<p><img src="../../../images/show/10-35524463.png" alt="" width="235" height="346" />&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>As you see above, I place the file that I have written on the supplements array in the supplements folder.</p>\r\n<p>And now, we are ready to begin creating the HTML code for the theme.</p>\r\n<p>&nbsp;</p>\r\n</div>\r\n<div id="views">\r\n<h2>Views</h2>\r\n<p>The files associated with the view must be placed in the super_simple/views folder.&nbsp;</p>\r\n<p>The views structure look like follows;</p>\r\n<p><img src="../../../images/show/11-89506042.png" alt="view screenshot" width="639" height="800" />&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>And please create the structur as above image.</p>\r\n<p>&nbsp;</p>\r\n<div id="layouts">\r\n<h3>Layouts</h3>\r\n<p>Rails use a layout to make the UI more effective. Other pages that we will create, will use this layout. So, before we start making other views, we need to create a layout first.</p>\r\n<p>The layout on this CMS must use the name <code>application.html.erb</code> and placed in the folder <code>theme_folder_name/views/layouts</code></p>\r\n<pre>&lt;!DOCTYPE html&gt;\r\n&lt;html lang="en"&gt;\r\n&lt;head&gt;\r\n&nbsp; &lt;meta charset="utf-8"&gt;\r\n&nbsp; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;\r\n&nbsp; &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;\r\n&nbsp; &lt;title&gt;Super Simple Theme&lt;/title&gt;\r\n&nbsp;\r\n&nbsp; &lt;link href="/css/bootstrap.min.css" rel="stylesheet"&gt;\r\n&nbsp; &lt;link href="/css/application.css" rel="stylesheet"&gt;\r\n&nbsp; &lt;script src="/js/bootstrap.min.js"&gt;&lt;/script&gt;\r\n&nbsp; &lt;script src="/js/application.js"&gt;&lt;/script&gt;\r\n&nbsp;\r\n&nbsp; &lt;%= csrf_meta_tags %&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&nbsp;\r\n&nbsp; &lt;%= yield %&gt;\r\n&nbsp;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n<p>&nbsp;</p>\r\n</div>\r\n<div id="landing">\r\n<h3>Landing</h3>\r\n<p>When the visitors come to the website, it will be on the root path (http://domain_name_for_cms.com). In this case, the root path will give the application a task to render the landing.html.erb file together with the layout.html.erb.</p>\r\n<p>The controller associated with the landing.html.erb provide <code>@article</code> object array so the view can use it for presentation. The <code>@articles</code>&nbsp;object properties as follows;</p>\r\n<ul>\r\n<li>id</li>\r\n<li>title</li>\r\n<li>body</li>\r\n<li>author_id</li>\r\n<li>full_name</li>\r\n<li>nick_name</li>\r\n<li>permalink</li>\r\n<li>excerp</li>\r\n<li>feat_img</li>\r\n<li>comment_status</li>\r\n<li>publish_status</li>\r\n<li>publish_visibility</li>\r\n<li>article_type</li>\r\n<li>article_vcount</li>\r\n<li>article_all</li>\r\n<li>created_at</li>\r\n<li>updated_at</li>\r\n</ul>\r\n<p>Now, let''s create a file <code>super_simple/views/landing/index.html.erb</code> and the code as follows;</p>\r\n<pre>&lt;div class="container"&gt;\r\n&nbsp; &lt;% @articles.each do |article| %&gt;\r\n&nbsp; &nbsp; &lt;article class="col-lg-12"&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;h1&gt;&lt;%= article.title %&gt;&lt;/h1&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;div&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;%= strip_tags(article.body)[0..400].html_safe %&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;a href="/&lt;%= article.permalink %&gt;"&gt;[Read more ...]&lt;/a&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;/div&gt;\r\n&nbsp; &nbsp; &lt;/article&gt;\r\n&nbsp; &nbsp; &lt;hr&gt;\r\n&nbsp; &lt;% end %&gt;<br />  &lt;%= will_paginate @articles %&gt;\r\n&lt;/div&gt;</pre>\r\n<p>As you see above, I don''t include all of the property of the article object on the presentation. However, you can include the property as you want.</p>\r\n<p>In the above code there are lines like the following;</p>\r\n<pre>&lt;%= strip_tags(article.body)[0..400].html_safe %&gt;</pre>\r\n<p>The code is easy. If you new to Ruby, I hope this explanation will make you clear;</p>\r\n<pre>&lt;% @the_body = article.body %&gt; &lt;!-- article body --&gt;<br />&lt;% @clear_tag = strip_tags(@the_body) %&gt; &lt;!-- remove html/tags from body --&gt;<br />&lt;%= @clear_tag[0..400].html_safe %&gt; &lt;!-- get 400 character and print --&gt;</pre>\r\n<p>And the last, you&nbsp;see a line;&nbsp;<code>&lt;%= will_paginate @articles %&gt;</code>.&nbsp;</p>\r\n<p>The code comes from Will Pagination gems because Ruby Sauce using it for pagination.</p>\r\n<p>&nbsp;</p>\r\n<p>Save the&nbsp;<code>super_simple/views/landing/index.html.erb</code>&nbsp;file and you can see the result in&nbsp;<a href=",">http://localhost:3000,</a>&nbsp;</p>\r\n<p>And the result look like follows;</p>\r\n<p><img src="../../images/show/29-47498960.png" alt="" width="1104" height="800" /></p>\r\n<p>OK, looks good. But, we miss a navigation. If we don''t have a navigation, the visitor will be lost.</p>\r\n<p>Let''s create the navigation by creating a <code>super_simple/views/landing/_nav.html.erb</code> file. Please notice, the file has an underscored before nav.html.erb. It''s Rails convention for partial render and the code like follows;</p>\r\n<pre>&lt;nav class="navbar navbar-default"&gt;\r\n&nbsp; &lt;div class="container"&gt;\r\n&nbsp; &nbsp; &lt;!-- Brand and toggle get grouped for better mobile display --&gt;\r\n&nbsp; &nbsp; &lt;div class="navbar-header"&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;span class="icon-bar"&gt;&lt;/span&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;span class="icon-bar"&gt;&lt;/span&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;span class="icon-bar"&gt;&lt;/span&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;/button&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;a class="navbar-brand" href="/"&gt;Super Simple&lt;/a&gt;\r\n&nbsp; &nbsp; &lt;/div&gt;\r\n&nbsp; &lt;/div&gt;&lt;!-- /.container-fluid --&gt;\r\n&lt;/nav&gt;&nbsp;</pre>\r\n<p>Open the <code>super_simple/views/landing/index.html.erb</code> file and add this line on the first line;</p>\r\n<pre>&lt;%= render partial: ''nav'' %&gt;</pre>\r\n<p>And the page should looks like follows;</p>\r\n<p><img src="../../images/show/31-99152734.png" alt="" width="413" height="200" />&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</div>\r\n<!-- /#landing -->\r\n<div id="article_single">\r\n<h3>Article Single</h3>\r\n<p>Article single is a&nbsp;page for showing a selected article. The URL format for single article is <a href="permalink-for-the-article">http://localhost:3000/permalink-for-the-article</a>.&nbsp;</p>\r\n<p>In Rails, you can easily change the URL format. But, it''s not covering by this guide.</p>\r\n<p>Just like landing page, the controller of Article Single&nbsp;passing <code>@article</code> object to the view. So, you can call <code>@article</code> properties. The <code>@article</code> properties has describe in layout section.&nbsp;</p>\r\n<p>The super_simple/views/article_single/index.html.erb file content look like follows;</p>\r\n<pre>&lt;%= render partial: ''landing/nav'' %&gt;\r\n&lt;article class="container"&gt;\r\n&nbsp; &lt;h1&gt;&lt;%= @article.title %&gt;&lt;/h1&gt;\r\n&nbsp; &lt;div&gt;\r\n&nbsp; &nbsp; &lt;%= @article.body.html_safe %&gt;\r\n&nbsp; &lt;/div&gt;\r\n&lt;/article&gt;</pre>\r\n<p>As you see, above code is very simple. And you can reuse or call the navigation header code that you have created by following code;</p>\r\n<pre>&lt;%= render partial: ''landing/nav'' %&gt;</pre>\r\n<p>&nbsp;</p>\r\n</div>\r\n<!-- /#article_single -->\r\n<div id="page_single">\r\n<h3>Page Single</h3>\r\n<p>In Ruby Sauce, a page is an article with type is a page. So, Page Single is a page which is use to display single article with type is a page. The URL format for Single Page&nbsp;is&nbsp;<a href="permalink-for-the-article">http://localhost:3000/page/permalink-for-the-p</a>age.</p>\r\n<p>You can easily change the URL format. &nbsp;But, it''s not covering by&nbsp;this guide.</p>\r\n<p>But, how can we got to the&nbsp;page even the page navigation is not exist?</p>\r\n<p>Ok, I will show you how to create a navigation for a page. Then, open up the <code>super_simple/views/landing/_nav.html.erb</code> file and add these line;</p>\r\n<pre>&lt;nav class="navbar navbar-default"&gt;\r\n&nbsp; &lt;div class="container"&gt;\r\n&nbsp; &nbsp;   &lt;!-- [...] HIDDEN CODE HERE --&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;a class="navbar-brand" href="/"&gt;Super Simple&lt;/a&gt;\r\n&nbsp; &nbsp; &lt;/div&gt;\r\n&nbsp; &nbsp; &lt;ul class="nav navbar-nav navbar-right"&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;% @pages = VPage.all %&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;% @pages.each do |pm| %&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;li&gt;&lt;a href="/page/&lt;%= pm.permalink %&gt;"&gt;&lt;%= pm.title %&gt;&lt;/a&gt;&lt;/li&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;% end %&gt;\r\n&nbsp; &nbsp; &lt;/ul&gt;\r\n&nbsp; &lt;/div&gt;&lt;!-- /.container-fluid --&gt;\r\n&lt;/nav&gt;</pre>\r\n<p>Save it, and if you go to <a href="../../">http://localhost:3000</a>,&nbsp;you should see the page in the navigation bar.</p>\r\n<p>Then, open up <code>super_simple/views/page_single/index.html.erb</code> and write these line;</p>\r\n<pre>&lt;%= render partial: ''landing/nav'' %&gt;\r\n&lt;article class="container"&gt;\r\n  &lt;h1&gt;&lt;%= @article.title %&gt;&lt;/h1&gt;\r\n  &lt;div&gt;\r\n    &lt;%= @article.body.html_safe %&gt;\r\n  &lt;/div&gt;\r\n&lt;/article&gt;</pre>\r\n<p>&nbsp;</p>\r\n</div>\r\n<!-- /#page single -->\r\n<div id="search">\r\n<h3>Search</h3>\r\n<p>The search page is just like landing page. But, it contains an input search.&nbsp;</p>\r\n<p>Before we begin creating search page, we need to create a search form inside the navigation.</p>\r\n<p>Please open the super_simple/views/landing/_nav.html.erb and add these line;</p>\r\n<pre>&lt;nav class="navbar navbar-default"&gt;\r\n  &lt;div class="container"&gt;   <br />    &lt;!-- [...] HIDDEN CODE --&gt;\r\n    &lt;ul class="nav navbar-nav navbar-right"&gt;\r\n      &lt;form action="/search" method="get" class="navbar-form navbar-right" role="search" id="form_search_fixed"&gt;\r\n        &lt;div class="form-group"&gt;\r\n          &lt;input type="text" class="form-control" placeholder="Search" name="q" value="&lt;%= @q %&gt;"&gt;\r\n        &lt;/div&gt;\r\n        &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;\r\n      &lt;/form&gt;\r\n      &lt;!-- [...] HIDDEN CODE --&gt;\r\n    &lt;/ul&gt;\r\n  &lt;/div&gt;&lt;!-- /.container-fluid --&gt;\r\n&lt;/nav&gt;</pre>\r\n<p>Go to&nbsp;<a href="../../">http://localhost:3000</a>&nbsp;and you should see a search form. And the navigation bar and the form should show in every page.</p>\r\n<p>Then, open <code>super_simple/views/search/index.html.erb</code> and add these line;</p>\r\n<pre>&lt;%= render partial: ''landing/nav'' %&gt;\r\n&lt;div class="container"&gt;\r\n&nbsp; &lt;% @articles.each do |article| %&gt;\r\n&nbsp; &nbsp; &lt;article class="col-lg-12"&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;h1&gt;&lt;%= article.title %&gt;&lt;/h1&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;div&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;%= strip_tags(article.body)[0..400].html_safe %&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;a href="/&lt;%= article.permalink %&gt;"&gt;[Read more ...]&lt;/a&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;/div&gt;\r\n&nbsp; &nbsp; &lt;/article&gt;\r\n&nbsp; &nbsp; &lt;hr&gt;\r\n&nbsp; &lt;% end %&gt;<br />  &lt;%= will_paginate @articles %&gt;\r\n&lt;/div&gt;</pre>\r\n<p>The code look like the landing view, right? Except in <code>&lt;%= render partial: ''landing/nav'' %&gt;</code>&nbsp;line.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</div>\r\n<!-- /#search --></div>\r\n<!-- /#views -->
', author_id: 1, permalink: "how-to-create-a-theme", excerp: "", feat_img: "default.png", comment_status: nil, publish_status: "Publish", publish_visibility: "Public", article_type: "Article",article_vcount: 48, created_at: DateTime.now , updated_at: DateTime.now}
      ])
  end
end
